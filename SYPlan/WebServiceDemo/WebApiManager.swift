//
//  ApiManager.swift
//  SYPlan
//
//  Created by Ray on 2019/4/29.
//  Copyright ¬© 2019 Sinyi. All rights reserved.
//

import Foundation

#if DEBUG
let basePath: String = "https://apitest.sinyi.com.tw/JServer/JT000A.asmx"
#else
let basePath: String = "https://api.sinyi.com.tw/JServer/JT000A.asmx"
#endif

/// Dictionary<String, Any>ÁöÑÂà•Âêç
typealias JSON = Dictionary<String, Any>

/// Api callback `completion`
typealias WebCompletion = (Result<JSON, WebApiError>) -> Swift.Void

/// Ë®òÈåÑÁõÆÂâçÁöÑTokenÔºådefaultÔºö""
var webGKey: String = ""

/// Ë®òÈåÑÁõÆÂâçË´ãÊ±ÇÁöÑweb service nameÔºådefaultÔºö.ssIphoneRegister
var currentSoapName: SoapName = .ssIphoneRegister

/// Ë®òÈåÑÁõÆÂâçAPIÂõûÊáâÂæåÁöÑÂÖßÂÆπÔºådefaultÔºö""
var currentXMLResult: String = ""

enum WebApiError: Error {
    case networkError
    
    case invalidURL(url: String)
    
    case nilData
    
    case parseXMLFailed
    
    case resultFailed(code: Int)
    
    case appUpdate(url: String)
    
    case other(msg: String)
    
    var message: String {
        get {
            switch self {
            case .networkError: return "ü•∫ Ë´ãÁ¢∫Ë™çÁõÆÂâçÁ∂≤Ë∑ØÁãÄÊÖãÊòØÂê¶ÈÄ£Êé•ÔºÅ"
            case .invalidURL(let url): return "ü•∫ \(url) üëâüèª ÊòØÁÑ°ÊïàÁöÑURLÔºÅ"
            case .nilData: return "ü•∫ Response data nilÔºÅ"
            case .parseXMLFailed: return "ü•∫ Ëß£ÊûêXMLÂ§±ÊïóÔºÅ"
            case .resultFailed(let code):
                switch code {
                case 202, 203, 204:
                    let msg = """
                    ü•∫ ÊÇ®ÁöÑÂ∏≥ËôüÂ∑≤Âú®Âè¶‰∏ÄÂè∞Ê©üÂô®‰∏≠‰ΩøÁî®ÔºåË´ãÂ∫óÈï∑ÊàñÁßòÊõ∏ÂÖàÂ∞áÊÇ®ÁöÑÂ∏≥ËôüÂà™Èô§ÂæåÂç≥ÂèØÂú®Ê≠§Âè∞Ê©üÂô®ÁôªÂÖ•„ÄÇÊàñÊ¥ΩË≥áË®äÈÉ®ÂàÜÊ©ü2200
                    """
                    return msg
                case 301: return "ü•∫ ÂïüÁî®ËªüÈ´îÈÅéÁ®ãÁôºÁîüÈåØË™§"
                case 302, 303: return "ü•∫ Á≥ªÁµ±ÁôºÁîüÁï∞Â∏∏"
                case 300, 400: return "ü•∫ Ë´ãËº∏ÂÖ•Ê≠£Á¢∫ÁöÑÂ∏≥ËôüÂØÜÁ¢º"
                case 401: return "ü•∫ ÂÖßÈÉ®ÁÑ°Ê≠§Âì°Â∑•Ë≥áÊñô"
                case 402: return "ü•∫ Ë©≤‰∫∫Âì°orË©≤ÂàÜÂ∫óÊú™ÂÖÅË®±‰ΩøÁî®ÊúçÂãô"
                case 403: return "ü•∫ ‰∫∫Âì°ÁôªË®ò‰πãË£ùÁΩÆÁ∑®ËôüË™çË≠âÈåØË™§"
                case 404: return "ü•∫ JSONÊ†ºÂºèÈåØË™§"
                case 405: return "ü•∫ Ëº∏ÂÖ•Ë≥áÊñôÊúâÊºè"
                case 406: return "ü•∫ ‰º∫ÊúçÂô®Á∂≠Ë≠∑‰∏≠ÔºåË´ãÁ®çÂÄôÂÜçË©¶"
                default: return "ü•∫ ‰º∫ÊúçÂô®Á∂≠Ë≠∑‰∏≠ÔºåË´ãÁ®çÂÄôÂÜçË©¶"
                }
            case .appUpdate(let url): return "ü•∫ ÈúÄË¶ÅÊõ¥Êñ∞ËªüÈ´îÁâàÊú¨ÊâçËÉΩÁπºÁ∫å‰ΩøÁî®;\(url)"
            case .other(let msg): return "ü•∫ \(msg)"
            }
        }
    }
}

enum SoapName: String {
    /// nameÔºöSSIphoneRegister
    case ssIphoneRegister = "SSIphoneRegister"
    
    /// nameÔºöSinyiEmployeeInfo
    case sinyiEmployeeInfo = "SinyiEmployeeInfo"
    
    /// nameÔºöSinyiAppStoreList
    case sinyiAppStoreList = "SinyiAppStoreList"
    
    func data(param: SoapParameters) -> Data? {
        let soapName: String = self.rawValue
        var body: String = ""
        
        switch param {
        case .login(let user, let pass):
            let version = Bundle.main.object(forInfoDictionaryKey: "CFBundleShortVersionString") as? String ?? "1.0.0"
            let devID = "554543bc7d8e409db3d6a600343ec06a"
            body = """
            <strID>\(user)</strID>
            <strPW>\(pass)</strPW>
            <strDevNewHID>\(devID)</strDevNewHID>
            <strVer>\(version)</strVer>
            """
        case .other(let param, let extParam):
            body = """
            <strGKey>\(webGKey)</strGKey>
            <strParam>\(param.string)</strParam>
            <strExtParam>\(extParam?.string ?? "")</strExtParam>
            """
        }
        
        let msg = """
        <?xml version="1.0" encoding="utf-8"?>
        <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
        <soap:Body>
        <\(soapName) xmlns="http://www.januarytc.com/">
        \(body)
        </\(soapName)>
        </soap:Body>
        </soap:Envelope>
        """
        return msg.data(using: .utf8)
    }
}

enum SoapParameters {
    case login(user: String, pass: String)
    
    case other(param: JSON, extParam: JSON?)
}

enum WebHttpMethod: String {
    case get = "GET"
    case post = "POST"
}

public struct WebHttpHeader {
    var field: String
    var value: String
    
    /// xmlÔºåContent-Type:text/xml; charset=utf-8
    static var xml: HttpHeader {
        get { return HttpHeader(field: "Content-Type", value: "text/xml; charset=utf-8") }
    }
    
    /// jsonÔºåContent-Type:text/xml
    static var json: HttpHeader {
        get { return HttpHeader(field: "Content-Type", value: "application/json") }
    }
}

public struct WebApiRequest: Hashable {
    
    var method: WebHttpMethod
    var soapName: SoapName
    var headers: [HttpHeader]?
    
    init(method: WebHttpMethod, soapName: SoapName) {
        self.method = method
        self.soapName = soapName
    }
    
    public func hash(into hasher: inout Hasher) {
        hasher.combine(method)
        hasher.combine(soapName)
    }
    
    public static func == (lhs: WebApiRequest, rhs: WebApiRequest) -> Bool {
        return lhs.method == rhs.method && lhs.soapName == rhs.soapName
    }
}

struct WebApiManager {
    
    private init() {}
    
    public static func fetch(from req: WebApiRequest, with param: SoapParameters,
                             completion: @escaping WebCompletion) {
        HttpSession.share.fetch(from: req, with: param, completion: completion)
    }
}
